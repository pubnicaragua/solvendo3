import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FileText, Plus, CreditCard, DollarSign, Percent } from 'lucide-react';
import { HeaderWithMenu } from '../components/common/HeaderWithMenu';
import { usePOS, Cliente } from '../contexts/POSContext';
import { useAuth } from '../contexts/AuthContext';
import { ClientModal } from '../components/pos/ClientModal';
import toast from 'react-hot-toast';

interface BillingPageProps {
  onClose?: () => void;
}

export const BillingPage: React.FC<BillingPageProps> = ({ onClose }) => {
  const [selectedClient, setSelectedClient] = useState<Cliente | null>(null);
  const [showClientModal, setShowClientModal] = useState(false);
  const [billingData, setBillingData] = useState({
    tipoDte: 'boleta',
    metodoPago: 'efectivo',
    descuentoGlobal: 0,
    montoRecibido: 0,
  });
  const [loading, setLoading] = useState(false);
  const [showPrintDialog, setShowPrintDialog] = useState(false);

  const { user } = useAuth();
  const navigate = useNavigate();
  const { carrito, total, clearCart, procesarVenta, currentCliente, selectClient, loadClientes } = usePOS();

  const validatePositiveNumber = (value: number): number => {
    return Math.max(0, value || 0);
  };

  useEffect(() => {
    if (currentCliente) {
      setSelectedClient(currentCliente);
    }
    loadClientes();
  }, [currentCliente, loadClientes]);

  useEffect(() => {
    if (carrito.length === 0 && !showPrintDialog) {
      navigate('/');
    }
  }, [carrito, navigate, showPrintDialog]);

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('es-CL', {
      style: 'currency',
      currency: 'CLP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  };

  const handleClientSelect = (cliente: Cliente | null) => {
    setSelectedClient(cliente);
    if (cliente) {
      selectClient(cliente);
      toast.success(`Cliente ${cliente.razon_social || cliente.nombre || cliente.nombres} seleccionado`);
    }
    setShowClientModal(false);
  };

  const totalSinDescuento = total;
  const montoDescuento = totalSinDescuento * (validatePositiveNumber(billingData.descuentoGlobal) / 100);
  const totalConDescuento = totalSinDescuento - montoDescuento;

  const totalAPagar = billingData.metodoPago === 'efectivo' 
    ? Math.round(totalConDescuento / 10) * 10 
    : totalConDescuento;

  const vuelto = billingData.metodoPago === 'efectivo'
    ? Math.max(0, validatePositiveNumber(billingData.montoRecibido) - totalAPagar)
    : 0;

  const handleConfirmPayment = async () => {
    if (carrito.length === 0) {
      toast.error('No hay productos en el carrito');
      return;
    }
    if ((billingData.tipoDte === 'factura' || billingData.tipoDte === 'factura_manual') && !selectedClient) {
      toast.error('Debe seleccionar un cliente para emitir una factura.');
      return;
    }

    setLoading(true);
    try {
      const result = await procesarVenta(
        billingData.metodoPago,
        billingData.tipoDte as 'boleta' | 'factura' | 'nota_credito',
        selectedClient?.id
      );

      if (result.success) {
        setShowPrintDialog(true);
      } else {
        toast.error(result.error || 'Error al procesar la venta');
      }
    } catch (error) {
      console.error('Error processing payment:', error);
      toast.error('Error al procesar el pago');
    } finally {
      setLoading(false);
    }
  };

  const finishSale = () => {
    clearCart();
    if (onClose) {
      onClose();
    } else {
      navigate('/');
    }
  };

  const handlePrint = () => {
    toast.success('Imprimiendo...');
    finishSale();
  };

  const handleSendEmail = () => {
    toast.success('Documento enviado por correo');
    finishSale();
  };

  if (showPrintDialog) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-xl max-w-md w-full p-6">
          <div className="text-center">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Venta Exitosa</h3>
            <p className="text-gray-600 mb-6">El documento ha sido generado.</p>
            <div className="flex mb-4">
              <input
                type="email"
                placeholder="Email del cliente"
                defaultValue={selectedClient?.email || ''}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                onClick={handleSendEmail}
                className="bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700"
              >
                Enviar
              </button>
            </div>
            <button
              onClick={handlePrint}
              className="w-full bg-gray-700 text-white py-3 rounded-lg font-medium hover:bg-gray-800"
            >
              Imprimir
            </button>
            <button
              onClick={finishSale}
              className="w-full mt-2 bg-transparent text-gray-700 py-2 rounded-lg font-medium hover:bg-gray-100"
            >
              Finalizar
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen bg-gray-50 flex flex-col">
      <HeaderWithMenu title="Facturación" icon={<FileText className="w-6 h-6 text-gray-600" />} userName={user?.nombre || 'Usuario'} />

      <div className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Left Column */}
            <div className="bg-white rounded-lg p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">1. Documento y Cliente</h3>
              <div className="space-y-4 mb-6">
                <div className="flex items-center gap-4">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="dte"
                      value="boleta"
                      checked={billingData.tipoDte === 'boleta'}
                      onChange={() => setBillingData(prev => ({ ...prev, tipoDte: 'boleta' }))}
                      className="text-blue-600 focus:ring-blue-500"
                    />
                    <span>Boleta</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="dte"
                      value="factura"
                      checked={billingData.tipoDte === 'factura'}
                      onChange={() => setBillingData(prev => ({ ...prev, tipoDte: 'factura' }))}
                      className="text-blue-600 focus:ring-blue-500"
                    />
                    <span>Factura Elec.</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name="dte"
                      value="factura_manual"
                      checked={billingData.tipoDte === 'factura_manual'}
                      onChange={() => setBillingData(prev => ({ ...prev, tipoDte: 'factura_manual' }))}
                      className="text-blue-600 focus:ring-blue-500"
                    />
                    <span>Factura Manual</span>
                  </label>
                </div>

                {(billingData.tipoDte === 'factura' || billingData.tipoDte === 'factura_manual') && (
                  <div className="mt-4 mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-sm font-medium text-gray-700">Cliente</h4>
                      <button
                        type="button"
                        onClick={() => setShowClientModal(true)}
                        className="text-xs text-blue-600 hover:text-blue-800 flex items-center gap-1"
                      >
                        <Plus className="w-3 h-3" />
                        {selectedClient ? 'Cambiar' : 'Seleccionar'}
                      </button>
                    </div>
                    {selectedClient ? (
                      <div className="bg-gray-50 p-3 rounded-lg border border-gray-200">
                        <div className="font-medium text-sm">
                          {selectedClient.razon_social || selectedClient.nombre || selectedClient.nombres}
                        </div>
                        <div className="text-xs text-gray-500">RUT: {selectedClient.rut}</div>
                      </div>
                    ) : (
                      <div className="text-sm text-gray-500 italic p-3 bg-gray-50 rounded-lg border">No seleccionado</div>
                    )}
                  </div>
                )}
              </div>

              <h3 className="text-lg font-semibold text-gray-900 mb-4">2. Pago y Descuentos</h3>
              <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-700 mb-3">Métodos de pago</h4>
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => setBillingData(prev => ({ ...prev, metodoPago: 'efectivo' }))}
                    className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors ${billingData.metodoPago === 'efectivo' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                  >
                    <DollarSign className="w-5 h-5" />
                    <span>Efectivo</span>
                  </button>
                  <button
                    onClick={() => setBillingData(prev => ({ ...prev, metodoPago: 'tarjeta' }))}
                    className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors ${billingData.metodoPago === 'tarjeta' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                  >
                    <CreditCard className="w-5 h-5" />
                    <span>Tarjeta</span>
                  </button>
                </div>
              </div>

              {billingData.metodoPago === 'efectivo' && (
                <div className="mb-6">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">Monto recibido</h4>
                  <input
                    type="number"
                    value={billingData.montoRecibido || ''}
                    onChange={(e) => setBillingData(prev => ({ ...prev, montoRecibido: parseFloat(e.target.value) || 0 }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                    placeholder="Ingrese el monto"
                  />
                </div>
              )}

              <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-700 mb-3">Descuento global (%)</h4>
                <div className="flex items-center">
                  <input
                    type="number"
                    value={billingData.descuentoGlobal || ''}
                    onChange={(e) => {
                      const value = Math.min(100, Math.max(0, parseFloat(e.target.value) || 0));
                      setBillingData(prev => ({ ...prev, descuentoGlobal: value }));
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                    placeholder="0"
                  />
                  <Percent className="ml-2 w-5 h-5 text-gray-400" />
                </div>
              </div>
            </div>

            {/* Right Column */}
            <div className="bg-white rounded-lg p-6 shadow-sm flex flex-col">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Resumen de la Venta</h3>
              <div className="space-y-2 flex-1">
                <div className="flex justify-between text-gray-600">
                  <span>Subtotal</span>
                  <span>{formatPrice(totalSinDescuento)}</span>
                </div>
                <div className="flex justify-between text-red-600">
                  <span>Descuento ({billingData.descuentoGlobal}%)</span>
                  <span>-{formatPrice(montoDescuento)}</span>
                </div>
                <hr className="my-2"/>
                <div className="flex justify-between font-bold text-xl text-gray-800">
                  <span>Total a Pagar</span>
                  <span>{formatPrice(totalAPagar)}</span>
                </div>
                {billingData.metodoPago === 'efectivo' && (
                  <>
                    <div className="flex justify-between text-gray-600">
                      <span>Recibido</span>
                      <span>{formatPrice(billingData.montoRecibido)}</span>
                    </div>
                    <div className="flex justify-between text-blue-600 font-semibold">
                      <span>Vuelto</span>
                      <span>{formatPrice(vuelto)}</span>
                    </div>
                  </>
                )}
              </div>
              <button
                onClick={handleConfirmPayment}
                disabled={loading}
                className="w-full bg-green-600 text-white py-3 mt-4 rounded-lg font-medium hover:bg-green-700 disabled:bg-gray-400 transition-colors"
              >
                {loading ? 'Procesando...' : 'Confirmar Venta'}
              </button>
            </div>
          </div>
        </div>
      </div>

      <ClientModal
        isOpen={showClientModal}
        onClose={() => setShowClientModal(false)}
        onClientSelect={handleClientSelect}
      />
    </div>
  );
};

export default BillingPage;
